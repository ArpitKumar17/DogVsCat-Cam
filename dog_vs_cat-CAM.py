# -*- coding: utf-8 -*-
"""Dog vs Cat.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uqW8MFo9AJ-5prVGMLrrHukO29BI3ibR
"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

#!/bin/bash
!kaggle datasets download -d salader/dogs-vs-cats

import zipfile
with zipfile.ZipFile('dogs-vs-cats.zip', 'r') as zip_ref:
    zip_ref.extractall('.')
zip_ref.close()

pip install tensorflow

pip install opencv-python

import tensorflow as tf
from tensorflow import keras
from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D,Flatten,BatchNormalization,Dropout,GlobalAveragePooling2D
from keras import Sequential
import numpy as np
import matplotlib.pyplot as plt
import os
import cv2

#generator
from tensorflow.keras.preprocessing.image import ImageDataGenerator

batch_size =17
train_datagenerator = ImageDataGenerator(rescale=1./255,shear_range=0.2,zoom_range=0.2,horizontal_flip=True)
test_datagenerator = ImageDataGenerator(rescale=1./255)
train_ds_generator = train_datagenerator.flow_from_directory(directory='/content/train',target_size=(150,150),batch_size=batch_size,class_mode='binary')
validation_ds_generator = test_datagenerator.flow_from_directory(directory='/content/test',target_size=(150,150),batch_size=batch_size,class_mode='binary')
# train_ds=keras.utils.image_dataset_from_directory(
#     directory = '/content/train',
#     labels = 'inferred',
#     label_mode = 'int',
#     batch_size = 32,
#     image_size = (256,256)
# )
# validation_ds=keras.utils.image_dataset_from_directory(
#     directory = '/content/test',
#     labels = 'inferred',
#     label_mode = 'int',
#     batch_size = 32,
#     image_size = (256,256)
# )

# #Normalize
# def process(image,label):
#   image=tf.cast(image/255. ,tf.float32)
#   return image,label
# train_ds=train_ds_generator.map(process)
# validation_ds=validation_ds_generator.map(process)

model = Sequential()

model.add(keras.Input(shape=(150,150,3)))
model.add(Conv2D(16,kernel_size=(3,3),activation='relu',padding='same'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(32,kernel_size=(3,3),activation='relu',padding='same'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(64,kernel_size=(3,3),activation='relu',padding='same'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(128,kernel_size=(3,3),activation='relu',padding='same'))
model.add(GlobalAveragePooling2D())
model.add(Dense(1,activation='sigmoid'))

model.summary()

model.compile(optimizer='rmsprop',loss='binary_crossentropy',metrics=['accuracy'])

# Replace fit_generator with fit, as fit now supports data generators
history = model.fit(train_ds_generator,
                    steps_per_epoch=20000 // batch_size, # Use steps_per_epoch instead of step_per_epoch
                    epochs=10,
                    validation_data=validation_ds_generator,
                    validation_steps=5000 // batch_size)

#CAM
gap_weights = model.layers[-1].get_weights()[0]
cam_model  = tf.keras.Model(inputs=model.inputs[0],outputs=(model.layers[-3].output,model.layers[-1].output))
cam_model.summary()

def show_cam(image_values,feature,results):
  features_for_img = feature[0]
  prediction = results[0]
  class_activation_weights = gap_weights[:,0]
  class_activation_features = sp.ndimage.zoom(features_for_img, (150/18, 150/18, 1), order=2)
  cam_output  = np.dot(class_activation_features,class_activation_weights)
  print(f'sigmoid output: {results}')
  print(f"prediction: {'dog' if round(results[0][0]) else 'cat'}")
  plt.figure(figsize=(8,8))
  plt.imshow(cam_output, cmap='jet', alpha=0.5)
  plt.imshow(tf.squeeze(image_values), alpha=0.5)
  plt.show()

!wget -O cat1.jpg https://storage.googleapis.com/tensorflow-1-public/tensorflow-3-temp/MLColabImages/cat1.jpeg
!wget -O cat2.jpg https://storage.googleapis.com/tensorflow-1-public/tensorflow-3-temp/MLColabImages/cat2.jpeg
!wget -O catanddog.jpg https://storage.googleapis.com/tensorflow-1-public/tensorflow-3-temp/MLColabImages/catanddog.jpeg
!wget -O dog1.jpg https://storage.googleapis.com/tensorflow-1-public/tensorflow-3-temp/MLColabImages/dog1.jpeg
!wget -O dog2.jpg https://storage.googleapis.com/tensorflow-1-public/tensorflow-3-temp/MLColabImages/dog2.jpeg

# utility function to preprocess an image and show the CAM
import scipy as sp
def convert_and_classify(image):

  # load the image
  img = cv2.imread(image)

  # preprocess the image before feeding it to the model
  img = cv2.resize(img, (150,150)) / 255.0

  # add a batch dimension because the model expects it
  tensor_image = np.expand_dims(img, axis=0)

  # get the features and prediction
  features,results = cam_model.predict(tensor_image)

  # generate the CAM
  show_cam(tensor_image, features, results)

convert_and_classify('cat1.jpg')
convert_and_classify('cat2.jpg')
convert_and_classify('catanddog.jpg')
convert_and_classify('dog1.jpg')
convert_and_classify('dog2.jpg')